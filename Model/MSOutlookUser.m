/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/



#import "MSOutlookModels.h"
#import "core/MSOrcObjectizer.h"


/** Implementation for MSOutlookUser
 *
 */
@implementation MSOutlookUser


@synthesize odataType = _odataType;


+ (NSDictionary *) $$$_$$$propertiesNamesMappings
{
    static NSDictionary *_$$$_$$$propertiesNamesMappings=nil; 
    
        if(_$$$_$$$propertiesNamesMappings==nil) {
    
        _$$$_$$$propertiesNamesMappings=[[NSDictionary alloc] initWithObjectsAndKeys:  @"EmailAddress", @"emailAddress", @"DisplayName", @"displayName", @"Alias", @"alias", @"MailboxGuid", @"mailboxGuid", @"Subscriptions", @"subscriptions", @"Messages", @"messages", @"JoinedGroups", @"joinedGroups", @"MailFolders", @"mailFolders", @"Calendar", @"calendar", @"Calendars", @"calendars", @"CalendarGroups", @"calendarGroups", @"CalendarView", @"calendarView", @"Events", @"events", @"Contacts", @"contacts", @"ContactFolders", @"contactFolders", @"Photo", @"photo", @"Id", @"_id", nil];
        
    }
    
    return _$$$_$$$propertiesNamesMappings;
}

- (instancetype)init {

	if (self = [super init]) {

		_odataType = @"#Microsoft.OutlookServices.User";
        
    }

	return self;
}



- (instancetype) initWithDictionary: (NSDictionary *) dic {
    if((self = [self init])) {
        if(dic!=nil) {
		_emailAddress = (![dic objectForKey: @"EmailAddress"] || [ [dic objectForKey: @"EmailAddress"] isKindOfClass:[NSNull class]] )?_emailAddress:[[dic objectForKey: @"EmailAddress"] copy];
		_displayName = (![dic objectForKey: @"DisplayName"] || [ [dic objectForKey: @"DisplayName"] isKindOfClass:[NSNull class]] )?_displayName:[[dic objectForKey: @"DisplayName"] copy];
		_alias = (![dic objectForKey: @"Alias"] || [ [dic objectForKey: @"Alias"] isKindOfClass:[NSNull class]] )?_alias:[[dic objectForKey: @"Alias"] copy];
		_mailboxGuid = (![dic objectForKey: @"MailboxGuid"] || [ [dic objectForKey: @"MailboxGuid"] isKindOfClass:[NSNull class]] )?_mailboxGuid:[[dic objectForKey: @"MailboxGuid"] copy];

        if([dic objectForKey: @"Subscriptions"] != [NSNull null]){
            _subscriptions = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"Subscriptions"]) {
                [_subscriptions addObject:[[MSOutlookSubscription alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_subscriptions resetChangedFlag];
        }
        

        if([dic objectForKey: @"Messages"] != [NSNull null]){
            _messages = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"Messages"]) {
                [_messages addObject:[[MSOutlookMessage alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_messages resetChangedFlag];
        }
        

        if([dic objectForKey: @"JoinedGroups"] != [NSNull null]){
            _joinedGroups = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"JoinedGroups"]) {
                [_joinedGroups addObject:[[MSOutlookGroup alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_joinedGroups resetChangedFlag];
        }
        

        if([dic objectForKey: @"MailFolders"] != [NSNull null]){
            _mailFolders = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"MailFolders"]) {
                [_mailFolders addObject:[[MSOutlookMailFolder alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_mailFolders resetChangedFlag];
        }
        
		_calendar = (![dic objectForKey: @"Calendar"] || [ [dic objectForKey: @"Calendar"] isKindOfClass:[NSNull class]] )?_calendar:[[MSOutlookCalendar alloc] initWithDictionary: [dic objectForKey: @"Calendar"]];

        if([dic objectForKey: @"Calendars"] != [NSNull null]){
            _calendars = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"Calendars"]) {
                [_calendars addObject:[[MSOutlookCalendar alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_calendars resetChangedFlag];
        }
        

        if([dic objectForKey: @"CalendarGroups"] != [NSNull null]){
            _calendarGroups = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"CalendarGroups"]) {
                [_calendarGroups addObject:[[MSOutlookCalendarGroup alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_calendarGroups resetChangedFlag];
        }
        

        if([dic objectForKey: @"CalendarView"] != [NSNull null]){
            _calendarView = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"CalendarView"]) {
                [_calendarView addObject:[[MSOutlookEvent alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_calendarView resetChangedFlag];
        }
        

        if([dic objectForKey: @"Events"] != [NSNull null]){
            _events = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"Events"]) {
                [_events addObject:[[MSOutlookEvent alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_events resetChangedFlag];
        }
        

        if([dic objectForKey: @"Contacts"] != [NSNull null]){
            _contacts = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"Contacts"]) {
                [_contacts addObject:[[MSOutlookContact alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_contacts resetChangedFlag];
        }
        

        if([dic objectForKey: @"ContactFolders"] != [NSNull null]){
            _contactFolders = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"ContactFolders"]) {
                [_contactFolders addObject:[[MSOutlookContactFolder alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_contactFolders resetChangedFlag];
        }
        
		_photo = (![dic objectForKey: @"Photo"] || [ [dic objectForKey: @"Photo"] isKindOfClass:[NSNull class]] )?_photo:[[MSOutlookPhoto alloc] initWithDictionary: [dic objectForKey: @"Photo"]];
		self._id = (![dic objectForKey: @"Id"] || [ [dic objectForKey: @"Id"] isKindOfClass:[NSNull class]] )?self._id:[[dic objectForKey: @"Id"] copy];
    }
    [self.updatedValues removeAllObjects];
    }
    
    return self;
}

- (NSDictionary *) toDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

	{id curVal = [self.emailAddress copy];if (curVal!=nil) [dic setValue: curVal forKey: @"EmailAddress"];}
	{id curVal = [self.displayName copy];if (curVal!=nil) [dic setValue: curVal forKey: @"DisplayName"];}
	{id curVal = [self.alias copy];if (curVal!=nil) [dic setValue: curVal forKey: @"Alias"];}
	{id curVal = [self.mailboxGuid copy];if (curVal!=nil) [dic setValue: curVal forKey: @"MailboxGuid"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.subscriptions) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"Subscriptions"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.messages) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"Messages"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.joinedGroups) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"JoinedGroups"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.mailFolders) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"MailFolders"];}
	{id curVal = [self.calendar toDictionary];if (curVal!=nil) [dic setValue: curVal forKey: @"Calendar"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.calendars) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"Calendars"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.calendarGroups) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"CalendarGroups"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.calendarView) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"CalendarView"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.events) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"Events"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.contacts) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"Contacts"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.contactFolders) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"ContactFolders"];}
	{id curVal = [self.photo toDictionary];if (curVal!=nil) [dic setValue: curVal forKey: @"Photo"];}
	{id curVal = [self._id copy];if (curVal!=nil) [dic setValue: curVal forKey: @"Id"];}
    [dic setValue: @"#Microsoft.OutlookServices.User" forKey: @"@odata.type"];

    return dic;
}

- (NSDictionary *) toUpdatedValuesDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

	{id curVal = self.emailAddress;
    if([self.updatedValues containsObject:@"EmailAddress"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"EmailAddress"];
            }
    }
	{id curVal = self.displayName;
    if([self.updatedValues containsObject:@"DisplayName"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"DisplayName"];
            }
    }
	{id curVal = self.alias;
    if([self.updatedValues containsObject:@"Alias"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"Alias"];
            }
    }
	{id curVal = self.mailboxGuid;
    if([self.updatedValues containsObject:@"MailboxGuid"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"MailboxGuid"];
            }
    }
	{id curVal = self.subscriptions;
    if([self.updatedValues containsObject:@"Subscriptions"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"Subscriptions"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.subscriptions) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"Subscriptions"];
        }
        
            }}
	{id curVal = self.messages;
    if([self.updatedValues containsObject:@"Messages"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"Messages"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.messages) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"Messages"];
        }
        
            }}
	{id curVal = self.joinedGroups;
    if([self.updatedValues containsObject:@"JoinedGroups"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"JoinedGroups"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.joinedGroups) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"JoinedGroups"];
        }
        
            }}
	{id curVal = self.mailFolders;
    if([self.updatedValues containsObject:@"MailFolders"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"MailFolders"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.mailFolders) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"MailFolders"];
        }
        
            }}
	{id curVal = self.calendar;
    if([self.updatedValues containsObject:@"Calendar"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"Calendar"];
            }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"Calendar"];
            }
        
            }}
	{id curVal = self.calendars;
    if([self.updatedValues containsObject:@"Calendars"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"Calendars"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.calendars) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"Calendars"];
        }
        
            }}
	{id curVal = self.calendarGroups;
    if([self.updatedValues containsObject:@"CalendarGroups"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"CalendarGroups"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.calendarGroups) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"CalendarGroups"];
        }
        
            }}
	{id curVal = self.calendarView;
    if([self.updatedValues containsObject:@"CalendarView"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"CalendarView"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.calendarView) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"CalendarView"];
        }
        
            }}
	{id curVal = self.events;
    if([self.updatedValues containsObject:@"Events"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"Events"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.events) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"Events"];
        }
        
            }}
	{id curVal = self.contacts;
    if([self.updatedValues containsObject:@"Contacts"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"Contacts"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.contacts) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"Contacts"];
        }
        
            }}
	{id curVal = self.contactFolders;
    if([self.updatedValues containsObject:@"ContactFolders"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"ContactFolders"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.contactFolders) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"ContactFolders"];
        }
        
            }}
	{id curVal = self.photo;
    if([self.updatedValues containsObject:@"Photo"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"Photo"];
            }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"Photo"];
            }
        
            }}
	{id curVal = self._id;
    if([self.updatedValues containsObject:@"Id"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"Id"];
            }
    }
    return dic;
}


/** Setter implementation for property emailAddress
 *
 */
- (void) setEmailAddress: (NSString *) value {
    _emailAddress = value;
    [self valueChangedFor:@"EmailAddress"];
}
       
/** Setter implementation for property displayName
 *
 */
- (void) setDisplayName: (NSString *) value {
    _displayName = value;
    [self valueChangedFor:@"DisplayName"];
}
       
/** Setter implementation for property alias
 *
 */
- (void) setAlias: (NSString *) value {
    _alias = value;
    [self valueChangedFor:@"Alias"];
}
       
/** Setter implementation for property mailboxGuid
 *
 */
- (void) setMailboxGuid: (NSString *) value {
    _mailboxGuid = value;
    [self valueChangedFor:@"MailboxGuid"];
}
       
/** Setter implementation for property subscriptions
 *
 */
- (void) setSubscriptions: (NSMutableArray *) value {
    _subscriptions = value;
    [self valueChangedFor:@"Subscriptions"];
}
       
/** Setter implementation for property messages
 *
 */
- (void) setMessages: (NSMutableArray *) value {
    _messages = value;
    [self valueChangedFor:@"Messages"];
}
       
/** Setter implementation for property joinedGroups
 *
 */
- (void) setJoinedGroups: (NSMutableArray *) value {
    _joinedGroups = value;
    [self valueChangedFor:@"JoinedGroups"];
}
       
/** Setter implementation for property mailFolders
 *
 */
- (void) setMailFolders: (NSMutableArray *) value {
    _mailFolders = value;
    [self valueChangedFor:@"MailFolders"];
}
       
/** Setter implementation for property calendar
 *
 */
- (void) setCalendar: (MSOutlookCalendar *) value {
    _calendar = value;
    [self valueChangedFor:@"Calendar"];
}
       
/** Setter implementation for property calendars
 *
 */
- (void) setCalendars: (NSMutableArray *) value {
    _calendars = value;
    [self valueChangedFor:@"Calendars"];
}
       
/** Setter implementation for property calendarGroups
 *
 */
- (void) setCalendarGroups: (NSMutableArray *) value {
    _calendarGroups = value;
    [self valueChangedFor:@"CalendarGroups"];
}
       
/** Setter implementation for property calendarView
 *
 */
- (void) setCalendarView: (NSMutableArray *) value {
    _calendarView = value;
    [self valueChangedFor:@"CalendarView"];
}
       
/** Setter implementation for property events
 *
 */
- (void) setEvents: (NSMutableArray *) value {
    _events = value;
    [self valueChangedFor:@"Events"];
}
       
/** Setter implementation for property contacts
 *
 */
- (void) setContacts: (NSMutableArray *) value {
    _contacts = value;
    [self valueChangedFor:@"Contacts"];
}
       
/** Setter implementation for property contactFolders
 *
 */
- (void) setContactFolders: (NSMutableArray *) value {
    _contactFolders = value;
    [self valueChangedFor:@"ContactFolders"];
}
       
/** Setter implementation for property photo
 *
 */
- (void) setPhoto: (MSOutlookPhoto *) value {
    _photo = value;
    [self valueChangedFor:@"Photo"];
}
       

@end
