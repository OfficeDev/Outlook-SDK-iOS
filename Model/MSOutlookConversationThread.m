/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/



#import "MSOutlookModels.h"
#import "core/MSOrcObjectizer.h"


/** Implementation for MSOutlookConversationThread
 *
 */
@implementation MSOutlookConversationThread


@synthesize odataType = _odataType;


+ (NSDictionary *) $$$_$$$propertiesNamesMappings
{
    static NSDictionary *_$$$_$$$propertiesNamesMappings=nil; 
    
        if(_$$$_$$$propertiesNamesMappings==nil) {
    
        _$$$_$$$propertiesNamesMappings=[[NSDictionary alloc] initWithObjectsAndKeys:  @"ToRecipients", @"toRecipients", @"Topic", @"topic", @"HasAttachments", @"hasAttachments", @"LastDeliveredDateTime", @"lastDeliveredDateTime", @"UniqueSenders", @"uniqueSenders", @"CcRecipients", @"ccRecipients", @"Preview", @"preview", @"IsLocked", @"isLocked", @"Posts", @"posts", @"Id", @"_id", nil];
        
    }
    
    return _$$$_$$$propertiesNamesMappings;
}

- (instancetype)init {

	if (self = [super init]) {

		_odataType = @"#Microsoft.OutlookServices.ConversationThread";
        
    }

	return self;
}



- (instancetype) initWithDictionary: (NSDictionary *) dic {
    if((self = [self init])) {
        if(dic!=nil) {

        if([dic objectForKey: @"ToRecipients"] != [NSNull null]){
            _toRecipients = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"ToRecipients"]) {
                [_toRecipients addObject:[[MSOutlookRecipient alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_toRecipients resetChangedFlag];
        }
        
		_topic = (![dic objectForKey: @"Topic"] || [ [dic objectForKey: @"Topic"] isKindOfClass:[NSNull class]] )?_topic:[[dic objectForKey: @"Topic"] copy];
		_hasAttachments = (![dic objectForKey: @"HasAttachments"] || [ [dic objectForKey: @"HasAttachments"] isKindOfClass:[NSNull class]] )?_hasAttachments:[[dic objectForKey: @"HasAttachments"] boolValue];
		_lastDeliveredDateTime = (![dic objectForKey: @"LastDeliveredDateTime"] || [ [dic objectForKey: @"LastDeliveredDateTime"] isKindOfClass:[NSNull class]] )?_lastDeliveredDateTime:[MSOrcObjectizer dateFromString:[dic objectForKey: @"LastDeliveredDateTime"]];

        if([dic objectForKey: @"UniqueSenders"] != [NSNull null]){
            _uniqueSenders = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"UniqueSenders"]) {
                [_uniqueSenders addObject:[object copy]];
            }
            
            [(MSOrcChangesTrackingArray *)_uniqueSenders resetChangedFlag];
        }
        

        if([dic objectForKey: @"CcRecipients"] != [NSNull null]){
            _ccRecipients = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"CcRecipients"]) {
                [_ccRecipients addObject:[[MSOutlookRecipient alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_ccRecipients resetChangedFlag];
        }
        
		_preview = (![dic objectForKey: @"Preview"] || [ [dic objectForKey: @"Preview"] isKindOfClass:[NSNull class]] )?_preview:[[dic objectForKey: @"Preview"] copy];
		_isLocked = (![dic objectForKey: @"IsLocked"] || [ [dic objectForKey: @"IsLocked"] isKindOfClass:[NSNull class]] )?_isLocked:[[dic objectForKey: @"IsLocked"] boolValue];

        if([dic objectForKey: @"Posts"] != [NSNull null]){
            _posts = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"Posts"]) {
                [_posts addObject:[[MSOutlookPost alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_posts resetChangedFlag];
        }
        
		self._id = (![dic objectForKey: @"Id"] || [ [dic objectForKey: @"Id"] isKindOfClass:[NSNull class]] )?self._id:[[dic objectForKey: @"Id"] copy];
    }
    [self.updatedValues removeAllObjects];
    }
    
    return self;
}

- (NSDictionary *) toDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.toRecipients) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"ToRecipients"];}
	{id curVal = [self.topic copy];if (curVal!=nil) [dic setValue: curVal forKey: @"Topic"];}
	{[dic setValue: (self.hasAttachments?@"true":@"false") forKey: @"HasAttachments"];}
	{id curVal = [MSOrcObjectizer stringFromDate:self.lastDeliveredDateTime];if (curVal!=nil) [dic setValue: curVal forKey: @"LastDeliveredDateTime"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.uniqueSenders) {
       [curVal addObject:[obj copy]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"UniqueSenders"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.ccRecipients) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"CcRecipients"];}
	{id curVal = [self.preview copy];if (curVal!=nil) [dic setValue: curVal forKey: @"Preview"];}
	{[dic setValue: (self.isLocked?@"true":@"false") forKey: @"IsLocked"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.posts) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"Posts"];}
	{id curVal = [self._id copy];if (curVal!=nil) [dic setValue: curVal forKey: @"Id"];}
    [dic setValue: @"#Microsoft.OutlookServices.ConversationThread" forKey: @"@odata.type"];

    return dic;
}

- (NSDictionary *) toUpdatedValuesDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

	{id curVal = self.toRecipients;
    if([self.updatedValues containsObject:@"ToRecipients"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"ToRecipients"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.toRecipients) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"ToRecipients"];
        }
        
            }}
	{id curVal = self.topic;
    if([self.updatedValues containsObject:@"Topic"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"Topic"];
            }
    }
 if([self.updatedValues containsObject:@"HasAttachments"])
            { [dic setValue: (self.hasAttachments?@"true":@"false") forKey: @"HasAttachments"];
}	{id curVal = self.lastDeliveredDateTime;
    if([self.updatedValues containsObject:@"LastDeliveredDateTime"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[MSOrcObjectizer stringFromDate:curVal] forKey: @"LastDeliveredDateTime"];
            }
    }
	{id curVal = self.uniqueSenders;
    if([self.updatedValues containsObject:@"UniqueSenders"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj copy]];
    }
    
            [dic setValue: curArray forKey: @"UniqueSenders"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.uniqueSenders) {
       [curArray addObject:[obj copy]];
    }
    
                 [dic setValue: curArray forKey: @"UniqueSenders"];
        }
        
            }}
	{id curVal = self.ccRecipients;
    if([self.updatedValues containsObject:@"CcRecipients"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"CcRecipients"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.ccRecipients) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"CcRecipients"];
        }
        
            }}
	{id curVal = self.preview;
    if([self.updatedValues containsObject:@"Preview"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"Preview"];
            }
    }
 if([self.updatedValues containsObject:@"IsLocked"])
            { [dic setValue: (self.isLocked?@"true":@"false") forKey: @"IsLocked"];
}	{id curVal = self.posts;
    if([self.updatedValues containsObject:@"Posts"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"Posts"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.posts) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"Posts"];
        }
        
            }}
	{id curVal = self._id;
    if([self.updatedValues containsObject:@"Id"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"Id"];
            }
    }
    return dic;
}


/** Setter implementation for property toRecipients
 *
 */
- (void) setToRecipients: (NSMutableArray *) value {
    _toRecipients = value;
    [self valueChangedFor:@"ToRecipients"];
}
       
/** Setter implementation for property topic
 *
 */
- (void) setTopic: (NSString *) value {
    _topic = value;
    [self valueChangedFor:@"Topic"];
}
       
/** Setter implementation for property hasAttachments
 *
 */
- (void) setHasAttachments: (bool) value {
    _hasAttachments = value;
    [self valueChangedFor:@"HasAttachments"];
}
       
/** Setter implementation for property lastDeliveredDateTime
 *
 */
- (void) setLastDeliveredDateTime: (NSDate *) value {
    _lastDeliveredDateTime = value;
    [self valueChangedFor:@"LastDeliveredDateTime"];
}
       
/** Setter implementation for property uniqueSenders
 *
 */
- (void) setUniqueSenders: (NSMutableArray *) value {
    _uniqueSenders = value;
    [self valueChangedFor:@"UniqueSenders"];
}
       
/** Setter implementation for property ccRecipients
 *
 */
- (void) setCcRecipients: (NSMutableArray *) value {
    _ccRecipients = value;
    [self valueChangedFor:@"CcRecipients"];
}
       
/** Setter implementation for property preview
 *
 */
- (void) setPreview: (NSString *) value {
    _preview = value;
    [self valueChangedFor:@"Preview"];
}
       
/** Setter implementation for property isLocked
 *
 */
- (void) setIsLocked: (bool) value {
    _isLocked = value;
    [self valueChangedFor:@"IsLocked"];
}
       
/** Setter implementation for property posts
 *
 */
- (void) setPosts: (NSMutableArray *) value {
    _posts = value;
    [self valueChangedFor:@"Posts"];
}
       

@end
