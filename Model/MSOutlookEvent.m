/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/



#import "MSOutlookModels.h"
#import "core/MSOrcObjectizer.h"


/** Implementation for MSOutlookEvent
 *
 */
@implementation MSOutlookEvent


@synthesize odataType = _odataType;


+ (NSDictionary *) $$$_$$$propertiesNamesMappings
{
    static NSDictionary *_$$$_$$$propertiesNamesMappings=nil; 
    
        if(_$$$_$$$propertiesNamesMappings==nil) {
    
        _$$$_$$$propertiesNamesMappings=[[NSDictionary alloc] initWithObjectsAndKeys:  @"OriginalStartTimeZone", @"originalStartTimeZone", @"OriginalEndTimeZone", @"originalEndTimeZone", @"ResponseStatus", @"responseStatus", @"iCalUId", @"iCalUId", @"ReminderMinutesBeforeStart", @"reminderMinutesBeforeStart", @"IsReminderOn", @"isReminderOn", @"HasAttachments", @"hasAttachments", @"Subject", @"subject", @"Body", @"body", @"BodyPreview", @"bodyPreview", @"Importance", @"importance", @"Sensitivity", @"sensitivity", @"Start", @"start", @"OriginalStart", @"originalStart", @"End", @"end", @"Location", @"location", @"IsAllDay", @"isAllDay", @"IsCancelled", @"isCancelled", @"IsOrganizer", @"isOrganizer", @"Recurrence", @"recurrence", @"ResponseRequested", @"responseRequested", @"SeriesMasterId", @"seriesMasterId", @"ShowAs", @"showAs", @"Type", @"type", @"Attendees", @"attendees", @"Organizer", @"organizer", @"WebLink", @"webLink", @"Calendar", @"calendar", @"Instances", @"instances", @"Attachments", @"attachments", @"CreatedDateTime", @"createdDateTime", @"LastModifiedDateTime", @"lastModifiedDateTime", @"ChangeKey", @"changeKey", @"Categories", @"categories", @"Id", @"_id", nil];
        
    }
    
    return _$$$_$$$propertiesNamesMappings;
}

- (instancetype)init {

	if (self = [super init]) {

		_odataType = @"#Microsoft.OutlookServices.Event";
        
    }

	return self;
}



- (instancetype) initWithDictionary: (NSDictionary *) dic {
    if((self = [self init])) {
        if(dic!=nil) {
		_originalStartTimeZone = (![dic objectForKey: @"OriginalStartTimeZone"] || [ [dic objectForKey: @"OriginalStartTimeZone"] isKindOfClass:[NSNull class]] )?_originalStartTimeZone:[[dic objectForKey: @"OriginalStartTimeZone"] copy];
		_originalEndTimeZone = (![dic objectForKey: @"OriginalEndTimeZone"] || [ [dic objectForKey: @"OriginalEndTimeZone"] isKindOfClass:[NSNull class]] )?_originalEndTimeZone:[[dic objectForKey: @"OriginalEndTimeZone"] copy];
		_responseStatus = (![dic objectForKey: @"ResponseStatus"] || [ [dic objectForKey: @"ResponseStatus"] isKindOfClass:[NSNull class]] )?_responseStatus:[[MSOutlookResponseStatus alloc] initWithDictionary: [dic objectForKey: @"ResponseStatus"]];
		_iCalUId = (![dic objectForKey: @"iCalUId"] || [ [dic objectForKey: @"iCalUId"] isKindOfClass:[NSNull class]] )?_iCalUId:[[dic objectForKey: @"iCalUId"] copy];
		_reminderMinutesBeforeStart = (![dic objectForKey: @"ReminderMinutesBeforeStart"] || [ [dic objectForKey: @"ReminderMinutesBeforeStart"] isKindOfClass:[NSNull class]] )?_reminderMinutesBeforeStart:[[dic objectForKey: @"ReminderMinutesBeforeStart"] intValue];
		_isReminderOn = (![dic objectForKey: @"IsReminderOn"] || [ [dic objectForKey: @"IsReminderOn"] isKindOfClass:[NSNull class]] )?_isReminderOn:[[dic objectForKey: @"IsReminderOn"] boolValue];
		_hasAttachments = (![dic objectForKey: @"HasAttachments"] || [ [dic objectForKey: @"HasAttachments"] isKindOfClass:[NSNull class]] )?_hasAttachments:[[dic objectForKey: @"HasAttachments"] boolValue];
		_subject = (![dic objectForKey: @"Subject"] || [ [dic objectForKey: @"Subject"] isKindOfClass:[NSNull class]] )?_subject:[[dic objectForKey: @"Subject"] copy];
		_body = (![dic objectForKey: @"Body"] || [ [dic objectForKey: @"Body"] isKindOfClass:[NSNull class]] )?_body:[[MSOutlookItemBody alloc] initWithDictionary: [dic objectForKey: @"Body"]];
		_bodyPreview = (![dic objectForKey: @"BodyPreview"] || [ [dic objectForKey: @"BodyPreview"] isKindOfClass:[NSNull class]] )?_bodyPreview:[[dic objectForKey: @"BodyPreview"] copy];
		_importance = (![dic objectForKey: @"Importance"] || [ [dic objectForKey: @"Importance"] isKindOfClass:[NSNull class]] )?_importance:[MSOutlookImportanceSerializer fromString:[dic objectForKey: @"Importance"]];
		_sensitivity = (![dic objectForKey: @"Sensitivity"] || [ [dic objectForKey: @"Sensitivity"] isKindOfClass:[NSNull class]] )?_sensitivity:[MSOutlookSensitivitySerializer fromString:[dic objectForKey: @"Sensitivity"]];
		_start = (![dic objectForKey: @"Start"] || [ [dic objectForKey: @"Start"] isKindOfClass:[NSNull class]] )?_start:[[MSOutlookDateTimeTimeZone alloc] initWithDictionary: [dic objectForKey: @"Start"]];
		_originalStart = (![dic objectForKey: @"OriginalStart"] || [ [dic objectForKey: @"OriginalStart"] isKindOfClass:[NSNull class]] )?_originalStart:[MSOrcObjectizer dateFromString:[dic objectForKey: @"OriginalStart"]];
		_end = (![dic objectForKey: @"End"] || [ [dic objectForKey: @"End"] isKindOfClass:[NSNull class]] )?_end:[[MSOutlookDateTimeTimeZone alloc] initWithDictionary: [dic objectForKey: @"End"]];
		_location = (![dic objectForKey: @"Location"] || [ [dic objectForKey: @"Location"] isKindOfClass:[NSNull class]] )?_location:[[MSOutlookLocation alloc] initWithDictionary: [dic objectForKey: @"Location"]];
		_isAllDay = (![dic objectForKey: @"IsAllDay"] || [ [dic objectForKey: @"IsAllDay"] isKindOfClass:[NSNull class]] )?_isAllDay:[[dic objectForKey: @"IsAllDay"] boolValue];
		_isCancelled = (![dic objectForKey: @"IsCancelled"] || [ [dic objectForKey: @"IsCancelled"] isKindOfClass:[NSNull class]] )?_isCancelled:[[dic objectForKey: @"IsCancelled"] boolValue];
		_isOrganizer = (![dic objectForKey: @"IsOrganizer"] || [ [dic objectForKey: @"IsOrganizer"] isKindOfClass:[NSNull class]] )?_isOrganizer:[[dic objectForKey: @"IsOrganizer"] boolValue];
		_recurrence = (![dic objectForKey: @"Recurrence"] || [ [dic objectForKey: @"Recurrence"] isKindOfClass:[NSNull class]] )?_recurrence:[[MSOutlookPatternedRecurrence alloc] initWithDictionary: [dic objectForKey: @"Recurrence"]];
		_responseRequested = (![dic objectForKey: @"ResponseRequested"] || [ [dic objectForKey: @"ResponseRequested"] isKindOfClass:[NSNull class]] )?_responseRequested:[[dic objectForKey: @"ResponseRequested"] boolValue];
		_seriesMasterId = (![dic objectForKey: @"SeriesMasterId"] || [ [dic objectForKey: @"SeriesMasterId"] isKindOfClass:[NSNull class]] )?_seriesMasterId:[[dic objectForKey: @"SeriesMasterId"] copy];
		_showAs = (![dic objectForKey: @"ShowAs"] || [ [dic objectForKey: @"ShowAs"] isKindOfClass:[NSNull class]] )?_showAs:[MSOutlookFreeBusyStatusSerializer fromString:[dic objectForKey: @"ShowAs"]];
		_type = (![dic objectForKey: @"Type"] || [ [dic objectForKey: @"Type"] isKindOfClass:[NSNull class]] )?_type:[MSOutlookEventTypeSerializer fromString:[dic objectForKey: @"Type"]];

        if([dic objectForKey: @"Attendees"] != [NSNull null]){
            _attendees = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"Attendees"]) {
                [_attendees addObject:[[MSOutlookAttendee alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_attendees resetChangedFlag];
        }
        
		_organizer = (![dic objectForKey: @"Organizer"] || [ [dic objectForKey: @"Organizer"] isKindOfClass:[NSNull class]] )?_organizer:[[MSOutlookRecipient alloc] initWithDictionary: [dic objectForKey: @"Organizer"]];
		_webLink = (![dic objectForKey: @"WebLink"] || [ [dic objectForKey: @"WebLink"] isKindOfClass:[NSNull class]] )?_webLink:[[dic objectForKey: @"WebLink"] copy];
		_calendar = (![dic objectForKey: @"Calendar"] || [ [dic objectForKey: @"Calendar"] isKindOfClass:[NSNull class]] )?_calendar:[[MSOutlookCalendar alloc] initWithDictionary: [dic objectForKey: @"Calendar"]];

        if([dic objectForKey: @"Instances"] != [NSNull null]){
            _instances = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"Instances"]) {
                [_instances addObject:[[MSOutlookEvent alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_instances resetChangedFlag];
        }
        

        if([dic objectForKey: @"Attachments"] != [NSNull null]){
            _attachments = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"Attachments"]) {
                [_attachments addObject:[[MSOutlookAttachment alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_attachments resetChangedFlag];
        }
        
		self.createdDateTime = (![dic objectForKey: @"CreatedDateTime"] || [ [dic objectForKey: @"CreatedDateTime"] isKindOfClass:[NSNull class]] )?self.createdDateTime:[MSOrcObjectizer dateFromString:[dic objectForKey: @"CreatedDateTime"]];
		self.lastModifiedDateTime = (![dic objectForKey: @"LastModifiedDateTime"] || [ [dic objectForKey: @"LastModifiedDateTime"] isKindOfClass:[NSNull class]] )?self.lastModifiedDateTime:[MSOrcObjectizer dateFromString:[dic objectForKey: @"LastModifiedDateTime"]];
		self.changeKey = (![dic objectForKey: @"ChangeKey"] || [ [dic objectForKey: @"ChangeKey"] isKindOfClass:[NSNull class]] )?self.changeKey:[[dic objectForKey: @"ChangeKey"] copy];

        if([dic objectForKey: @"Categories"] != [NSNull null]){
            self.categories = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"Categories"]) {
                [self.categories addObject:[object copy]];
            }
            
            [(MSOrcChangesTrackingArray *)self.categories resetChangedFlag];
        }
        
		self._id = (![dic objectForKey: @"Id"] || [ [dic objectForKey: @"Id"] isKindOfClass:[NSNull class]] )?self._id:[[dic objectForKey: @"Id"] copy];
    }
    [self.updatedValues removeAllObjects];
    }
    
    return self;
}

- (NSDictionary *) toDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

	{id curVal = [self.originalStartTimeZone copy];if (curVal!=nil) [dic setValue: curVal forKey: @"OriginalStartTimeZone"];}
	{id curVal = [self.originalEndTimeZone copy];if (curVal!=nil) [dic setValue: curVal forKey: @"OriginalEndTimeZone"];}
	{id curVal = [self.responseStatus toDictionary];if (curVal!=nil) [dic setValue: curVal forKey: @"ResponseStatus"];}
	{id curVal = [self.iCalUId copy];if (curVal!=nil) [dic setValue: curVal forKey: @"iCalUId"];}
	{[dic setValue: [NSNumber numberWithInt: self.reminderMinutesBeforeStart] forKey: @"ReminderMinutesBeforeStart"];}
	{[dic setValue: (self.isReminderOn?@"true":@"false") forKey: @"IsReminderOn"];}
	{[dic setValue: (self.hasAttachments?@"true":@"false") forKey: @"HasAttachments"];}
	{id curVal = [self.subject copy];if (curVal!=nil) [dic setValue: curVal forKey: @"Subject"];}
	{id curVal = [self.body toDictionary];if (curVal!=nil) [dic setValue: curVal forKey: @"Body"];}
	{id curVal = [self.bodyPreview copy];if (curVal!=nil) [dic setValue: curVal forKey: @"BodyPreview"];}
	{[dic setValue: [MSOutlookImportanceSerializer toString:self.importance] forKey: @"Importance"];}
	{[dic setValue: [MSOutlookSensitivitySerializer toString:self.sensitivity] forKey: @"Sensitivity"];}
	{id curVal = [self.start toDictionary];if (curVal!=nil) [dic setValue: curVal forKey: @"Start"];}
	{id curVal = [MSOrcObjectizer stringFromDate:self.originalStart];if (curVal!=nil) [dic setValue: curVal forKey: @"OriginalStart"];}
	{id curVal = [self.end toDictionary];if (curVal!=nil) [dic setValue: curVal forKey: @"End"];}
	{id curVal = [self.location toDictionary];if (curVal!=nil) [dic setValue: curVal forKey: @"Location"];}
	{[dic setValue: (self.isAllDay?@"true":@"false") forKey: @"IsAllDay"];}
	{[dic setValue: (self.isCancelled?@"true":@"false") forKey: @"IsCancelled"];}
	{[dic setValue: (self.isOrganizer?@"true":@"false") forKey: @"IsOrganizer"];}
	{id curVal = [self.recurrence toDictionary];if (curVal!=nil) [dic setValue: curVal forKey: @"Recurrence"];}
	{[dic setValue: (self.responseRequested?@"true":@"false") forKey: @"ResponseRequested"];}
	{id curVal = [self.seriesMasterId copy];if (curVal!=nil) [dic setValue: curVal forKey: @"SeriesMasterId"];}
	{[dic setValue: [MSOutlookFreeBusyStatusSerializer toString:self.showAs] forKey: @"ShowAs"];}
	{[dic setValue: [MSOutlookEventTypeSerializer toString:self.type] forKey: @"Type"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.attendees) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"Attendees"];}
	{id curVal = [self.organizer toDictionary];if (curVal!=nil) [dic setValue: curVal forKey: @"Organizer"];}
	{id curVal = [self.webLink copy];if (curVal!=nil) [dic setValue: curVal forKey: @"WebLink"];}
	{id curVal = [self.calendar toDictionary];if (curVal!=nil) [dic setValue: curVal forKey: @"Calendar"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.instances) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"Instances"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.attachments) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"Attachments"];}
	{id curVal = [MSOrcObjectizer stringFromDate:self.createdDateTime];if (curVal!=nil) [dic setValue: curVal forKey: @"CreatedDateTime"];}
	{id curVal = [MSOrcObjectizer stringFromDate:self.lastModifiedDateTime];if (curVal!=nil) [dic setValue: curVal forKey: @"LastModifiedDateTime"];}
	{id curVal = [self.changeKey copy];if (curVal!=nil) [dic setValue: curVal forKey: @"ChangeKey"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.categories) {
       [curVal addObject:[obj copy]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"Categories"];}
	{id curVal = [self._id copy];if (curVal!=nil) [dic setValue: curVal forKey: @"Id"];}
    [dic setValue: @"#Microsoft.OutlookServices.Event" forKey: @"@odata.type"];

    return dic;
}

- (NSDictionary *) toUpdatedValuesDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

	{id curVal = self.originalStartTimeZone;
    if([self.updatedValues containsObject:@"OriginalStartTimeZone"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"OriginalStartTimeZone"];
            }
    }
	{id curVal = self.originalEndTimeZone;
    if([self.updatedValues containsObject:@"OriginalEndTimeZone"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"OriginalEndTimeZone"];
            }
    }
	{id curVal = self.responseStatus;
    if([self.updatedValues containsObject:@"ResponseStatus"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"ResponseStatus"];
            }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"ResponseStatus"];
            }
        
            }}
	{id curVal = self.iCalUId;
    if([self.updatedValues containsObject:@"iCalUId"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"iCalUId"];
            }
    }
 if([self.updatedValues containsObject:@"ReminderMinutesBeforeStart"])
            { [dic setValue: [NSNumber numberWithInt: self.reminderMinutesBeforeStart] forKey: @"ReminderMinutesBeforeStart"];
} if([self.updatedValues containsObject:@"IsReminderOn"])
            { [dic setValue: (self.isReminderOn?@"true":@"false") forKey: @"IsReminderOn"];
} if([self.updatedValues containsObject:@"HasAttachments"])
            { [dic setValue: (self.hasAttachments?@"true":@"false") forKey: @"HasAttachments"];
}	{id curVal = self.subject;
    if([self.updatedValues containsObject:@"Subject"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"Subject"];
            }
    }
	{id curVal = self.body;
    if([self.updatedValues containsObject:@"Body"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"Body"];
            }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"Body"];
            }
        
            }}
	{id curVal = self.bodyPreview;
    if([self.updatedValues containsObject:@"BodyPreview"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"BodyPreview"];
            }
    }
 if([self.updatedValues containsObject:@"Importance"])
            { [dic setValue: [MSOutlookImportanceSerializer toString:self.importance] forKey: @"Importance"];
} if([self.updatedValues containsObject:@"Sensitivity"])
            { [dic setValue: [MSOutlookSensitivitySerializer toString:self.sensitivity] forKey: @"Sensitivity"];
}	{id curVal = self.start;
    if([self.updatedValues containsObject:@"Start"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"Start"];
            }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"Start"];
            }
        
            }}
	{id curVal = self.originalStart;
    if([self.updatedValues containsObject:@"OriginalStart"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[MSOrcObjectizer stringFromDate:curVal] forKey: @"OriginalStart"];
            }
    }
	{id curVal = self.end;
    if([self.updatedValues containsObject:@"End"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"End"];
            }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"End"];
            }
        
            }}
	{id curVal = self.location;
    if([self.updatedValues containsObject:@"Location"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"Location"];
            }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"Location"];
            }
        
            }}
 if([self.updatedValues containsObject:@"IsAllDay"])
            { [dic setValue: (self.isAllDay?@"true":@"false") forKey: @"IsAllDay"];
} if([self.updatedValues containsObject:@"IsCancelled"])
            { [dic setValue: (self.isCancelled?@"true":@"false") forKey: @"IsCancelled"];
} if([self.updatedValues containsObject:@"IsOrganizer"])
            { [dic setValue: (self.isOrganizer?@"true":@"false") forKey: @"IsOrganizer"];
}	{id curVal = self.recurrence;
    if([self.updatedValues containsObject:@"Recurrence"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"Recurrence"];
            }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"Recurrence"];
            }
        
            }}
 if([self.updatedValues containsObject:@"ResponseRequested"])
            { [dic setValue: (self.responseRequested?@"true":@"false") forKey: @"ResponseRequested"];
}	{id curVal = self.seriesMasterId;
    if([self.updatedValues containsObject:@"SeriesMasterId"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"SeriesMasterId"];
            }
    }
 if([self.updatedValues containsObject:@"ShowAs"])
            { [dic setValue: [MSOutlookFreeBusyStatusSerializer toString:self.showAs] forKey: @"ShowAs"];
} if([self.updatedValues containsObject:@"Type"])
            { [dic setValue: [MSOutlookEventTypeSerializer toString:self.type] forKey: @"Type"];
}	{id curVal = self.attendees;
    if([self.updatedValues containsObject:@"Attendees"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"Attendees"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.attendees) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"Attendees"];
        }
        
            }}
	{id curVal = self.organizer;
    if([self.updatedValues containsObject:@"Organizer"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"Organizer"];
            }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"Organizer"];
            }
        
            }}
	{id curVal = self.webLink;
    if([self.updatedValues containsObject:@"WebLink"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"WebLink"];
            }
    }
	{id curVal = self.calendar;
    if([self.updatedValues containsObject:@"Calendar"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"Calendar"];
            }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"Calendar"];
            }
        
            }}
	{id curVal = self.instances;
    if([self.updatedValues containsObject:@"Instances"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"Instances"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.instances) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"Instances"];
        }
        
            }}
	{id curVal = self.attachments;
    if([self.updatedValues containsObject:@"Attachments"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"Attachments"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.attachments) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"Attachments"];
        }
        
            }}
	{id curVal = self.createdDateTime;
    if([self.updatedValues containsObject:@"CreatedDateTime"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[MSOrcObjectizer stringFromDate:curVal] forKey: @"CreatedDateTime"];
            }
    }
	{id curVal = self.lastModifiedDateTime;
    if([self.updatedValues containsObject:@"LastModifiedDateTime"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[MSOrcObjectizer stringFromDate:curVal] forKey: @"LastModifiedDateTime"];
            }
    }
	{id curVal = self.changeKey;
    if([self.updatedValues containsObject:@"ChangeKey"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"ChangeKey"];
            }
    }
	{id curVal = self.categories;
    if([self.updatedValues containsObject:@"Categories"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj copy]];
    }
    
            [dic setValue: curArray forKey: @"Categories"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.categories) {
       [curArray addObject:[obj copy]];
    }
    
                 [dic setValue: curArray forKey: @"Categories"];
        }
        
            }}
	{id curVal = self._id;
    if([self.updatedValues containsObject:@"Id"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"Id"];
            }
    }
    return dic;
}


/** Setter implementation for property originalStartTimeZone
 *
 */
- (void) setOriginalStartTimeZone: (NSString *) value {
    _originalStartTimeZone = value;
    [self valueChangedFor:@"OriginalStartTimeZone"];
}
       
/** Setter implementation for property originalEndTimeZone
 *
 */
- (void) setOriginalEndTimeZone: (NSString *) value {
    _originalEndTimeZone = value;
    [self valueChangedFor:@"OriginalEndTimeZone"];
}
       
/** Setter implementation for property responseStatus
 *
 */
- (void) setResponseStatus: (MSOutlookResponseStatus *) value {
    _responseStatus = value;
    [self valueChangedFor:@"ResponseStatus"];
}
       
/** Setter implementation for property iCalUId
 *
 */
- (void) setICalUId: (NSString *) value {
    _iCalUId = value;
    [self valueChangedFor:@"iCalUId"];
}
       
/** Setter implementation for property reminderMinutesBeforeStart
 *
 */
- (void) setReminderMinutesBeforeStart: (int) value {
    _reminderMinutesBeforeStart = value;
    [self valueChangedFor:@"ReminderMinutesBeforeStart"];
}
       
/** Setter implementation for property isReminderOn
 *
 */
- (void) setIsReminderOn: (bool) value {
    _isReminderOn = value;
    [self valueChangedFor:@"IsReminderOn"];
}
       
/** Setter implementation for property hasAttachments
 *
 */
- (void) setHasAttachments: (bool) value {
    _hasAttachments = value;
    [self valueChangedFor:@"HasAttachments"];
}
       
/** Setter implementation for property subject
 *
 */
- (void) setSubject: (NSString *) value {
    _subject = value;
    [self valueChangedFor:@"Subject"];
}
       
/** Setter implementation for property body
 *
 */
- (void) setBody: (MSOutlookItemBody *) value {
    _body = value;
    [self valueChangedFor:@"Body"];
}
       
/** Setter implementation for property bodyPreview
 *
 */
- (void) setBodyPreview: (NSString *) value {
    _bodyPreview = value;
    [self valueChangedFor:@"BodyPreview"];
}
       
/** Setter implementation for property importance
 *
 */
- (void) setImportance: (MSOutlookImportance) value {
    _importance = value;
    [self valueChangedFor:@"Importance"];
}
       

- (void)setImportanceString:(NSString *)string {
        
    _importance = [MSOutlookImportanceSerializer fromString:string];
    [self valueChangedFor:@"Importance"]; 
}

/** Setter implementation for property sensitivity
 *
 */
- (void) setSensitivity: (MSOutlookSensitivity) value {
    _sensitivity = value;
    [self valueChangedFor:@"Sensitivity"];
}
       

- (void)setSensitivityString:(NSString *)string {
        
    _sensitivity = [MSOutlookSensitivitySerializer fromString:string];
    [self valueChangedFor:@"Sensitivity"]; 
}

/** Setter implementation for property start
 *
 */
- (void) setStart: (MSOutlookDateTimeTimeZone *) value {
    _start = value;
    [self valueChangedFor:@"Start"];
}
       
/** Setter implementation for property originalStart
 *
 */
- (void) setOriginalStart: (NSDate *) value {
    _originalStart = value;
    [self valueChangedFor:@"OriginalStart"];
}
       
/** Setter implementation for property end
 *
 */
- (void) setEnd: (MSOutlookDateTimeTimeZone *) value {
    _end = value;
    [self valueChangedFor:@"End"];
}
       
/** Setter implementation for property location
 *
 */
- (void) setLocation: (MSOutlookLocation *) value {
    _location = value;
    [self valueChangedFor:@"Location"];
}
       
/** Setter implementation for property isAllDay
 *
 */
- (void) setIsAllDay: (bool) value {
    _isAllDay = value;
    [self valueChangedFor:@"IsAllDay"];
}
       
/** Setter implementation for property isCancelled
 *
 */
- (void) setIsCancelled: (bool) value {
    _isCancelled = value;
    [self valueChangedFor:@"IsCancelled"];
}
       
/** Setter implementation for property isOrganizer
 *
 */
- (void) setIsOrganizer: (bool) value {
    _isOrganizer = value;
    [self valueChangedFor:@"IsOrganizer"];
}
       
/** Setter implementation for property recurrence
 *
 */
- (void) setRecurrence: (MSOutlookPatternedRecurrence *) value {
    _recurrence = value;
    [self valueChangedFor:@"Recurrence"];
}
       
/** Setter implementation for property responseRequested
 *
 */
- (void) setResponseRequested: (bool) value {
    _responseRequested = value;
    [self valueChangedFor:@"ResponseRequested"];
}
       
/** Setter implementation for property seriesMasterId
 *
 */
- (void) setSeriesMasterId: (NSString *) value {
    _seriesMasterId = value;
    [self valueChangedFor:@"SeriesMasterId"];
}
       
/** Setter implementation for property showAs
 *
 */
- (void) setShowAs: (MSOutlookFreeBusyStatus) value {
    _showAs = value;
    [self valueChangedFor:@"ShowAs"];
}
       

- (void)setShowAsString:(NSString *)string {
        
    _showAs = [MSOutlookFreeBusyStatusSerializer fromString:string];
    [self valueChangedFor:@"ShowAs"]; 
}

/** Setter implementation for property type
 *
 */
- (void) setType: (MSOutlookEventType) value {
    _type = value;
    [self valueChangedFor:@"Type"];
}
       

- (void)setTypeString:(NSString *)string {
        
    _type = [MSOutlookEventTypeSerializer fromString:string];
    [self valueChangedFor:@"Type"]; 
}

/** Setter implementation for property attendees
 *
 */
- (void) setAttendees: (NSMutableArray *) value {
    _attendees = value;
    [self valueChangedFor:@"Attendees"];
}
       
/** Setter implementation for property organizer
 *
 */
- (void) setOrganizer: (MSOutlookRecipient *) value {
    _organizer = value;
    [self valueChangedFor:@"Organizer"];
}
       
/** Setter implementation for property webLink
 *
 */
- (void) setWebLink: (NSString *) value {
    _webLink = value;
    [self valueChangedFor:@"WebLink"];
}
       
/** Setter implementation for property calendar
 *
 */
- (void) setCalendar: (MSOutlookCalendar *) value {
    _calendar = value;
    [self valueChangedFor:@"Calendar"];
}
       
/** Setter implementation for property instances
 *
 */
- (void) setInstances: (NSMutableArray *) value {
    _instances = value;
    [self valueChangedFor:@"Instances"];
}
       
/** Setter implementation for property attachments
 *
 */
- (void) setAttachments: (NSMutableArray *) value {
    _attachments = value;
    [self valueChangedFor:@"Attachments"];
}
       

@end
